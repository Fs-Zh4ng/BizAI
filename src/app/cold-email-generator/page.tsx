'use client';

import Link from "next/link";
import { useState } from "react";
import { ApiClient, Campaign, EmailTemplate, Target } from "@/lib/api-client";

// Email count range options
const EMAIL_COUNT_OPTIONS = [
  { id: 'small', label: '5-10 emails', min: 5, max: 10 },
  { id: 'medium', label: '10-20 emails', min: 10, max: 20 },
  { id: 'large', label: '20-50 emails', min: 20, max: 50 },
  { id: 'enterprise', label: '50-100 emails', min: 50, max: 100 },
];

export default function ColdEmailGenerator() {
  const [formData, setFormData] = useState({
    businessName: '',
    businessDescription: '',
    targetAudience: '',
    emailCount: 'small',
    userFullName: '',
    userPosition: ''
  });
  
  const [isGenerating, setIsGenerating] = useState(false);
  const [campaign, setCampaign] = useState<Campaign | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [showResults, setShowResults] = useState(false);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsGenerating(true);
    setError(null);
    setShowResults(false);

    try {
      // send userFullName and userPosition along with campaign data
      const result = await ApiClient.generateCampaign(formData as any);
      setCampaign(result);
      setShowResults(true);
      console.log(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate campaign');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopyEmail = async (template: EmailTemplate, target: Target) => {
    try {
      const personalize = (text: string) =>
        text
          .replace(/\[NAME\]/g, target.name)
          .replace(/\[COMPANY\]/g, target.company)
          .replace(/\[TITLE\]/g, target.title || 'Professional')
          // replace sender placeholders from form inputs (case-insensitive)
          .replace(/\[your full name\]/gi, formData.userFullName || '')
          .replace(/\[your position\]/gi, formData.userPosition || '');

      const personalizedSubject = personalize(template.subject || '');
      const personalizedBody = personalize(template.body);

      const emailText = `Subject: ${personalizedSubject}\n\n${personalizedBody}\n\n---\nGenerated by BizAI Tools - Cold Email Generator`;
      
      await ApiClient.copyToClipboard(emailText);
      // You could add a toast notification here
      alert('Email copied to clipboard!');
    } catch (err) {
      alert('Failed to copy email');
    }
  };

  // Helper to create personalized versions without mutating original templates
  const personalizeTemplateForTarget = (template: EmailTemplate, target: Target) => {
    const replace = (text: string) =>
      text
        .replace(/\[NAME\]/g, target.name)
        .replace(/\[COMPANY\]/g, target.company)
        .replace(/\[TITLE\]/g, target.title || 'Professional')
        // replace sender placeholders so UI shows copy-paste-ready text
        .replace(/\[your full name\]/gi, formData.userFullName || '')
        .replace(/\[your position\]/gi, formData.userPosition || '');

    return {
      ...template,
      subject: template.subject ? replace(template.subject) : '',
      body: replace(template.body),
    } as EmailTemplate;
  };

  const handleExportCSV = async () => {
    if (!campaign) return;
    
    try {
      await ApiClient.exportCSV(campaign.id);
    } catch (err) {
      alert('Failed to export CSV');
    }
  };

  const handleExportPDF = async () => {
    if (!campaign) return;
    
    try {
      await ApiClient.exportPDF(campaign.id);
    } catch (err) {
      alert('Failed to export PDF');
    }
  };
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
      {/* Header */}
      <header className="px-6 py-4">
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <Link href="/" className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
              <div className="w-4 h-4 bg-white rounded-sm"></div>
            </div>
            <span className="text-xl font-bold text-gray-900">BizAI Tools</span>
          </Link>
          <nav className="hidden md:flex space-x-8">
            <a href="/cold-email-generator" className="text-blue-600 hover:text-blue-900 font-semibold">Cold Email Generator</a>
            <a href="/competitor-analysis" className="text-gray-600 hover:text-gray-900">Competitor Analysis</a>
          </nav>
          <button className="bg-gray-900 text-white px-6 py-2 rounded-lg hover:bg-gray-800 transition-colors">
            Try Now
          </button>
        </div>
      </header>

      {/* Hero Section */}
      <main className="px-6 py-16">
        <div className="max-w-4xl mx-auto text-center">
          <div className="inline-flex items-center px-4 py-2 bg-green-100 text-green-800 rounded-full text-sm font-medium mb-8">
            <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
            AI Cold Email Generator
          </div>
          
          <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6 leading-tight">
            Generate personalized
            <span className="bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent"> cold emails</span>
            <br />in seconds
          </h1>
          
          <p className="text-xl text-gray-600 mb-12 max-w-3xl mx-auto leading-relaxed">
            Tell us about your business and we'll help you find the right targets and generate 
            personalized cold emails with follow-ups.
          </p>
        </div>
      </main>

      {/* Business Input Form */}
      <section className="px-6 py-12">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-2xl p-8 shadow-lg border border-gray-100">
            <h2 className="text-2xl font-bold text-gray-900 mb-6 text-center">Tell us about your business</h2>
            
            <form onSubmit={handleSubmit} className="space-y-6">
              <div>
                <label htmlFor="businessName" className="block text-sm font-medium text-gray-700 mb-2">
                  Business Name
                </label>
                <input
                  type="text"
                  id="businessName"
                  name="businessName"
                  value={formData.businessName}
                  onChange={handleInputChange}
                  placeholder="e.g., TechStart Solutions"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg text-black"
                  required
                />
              </div>
              
              <div>
                <label htmlFor="businessDescription" className="block text-sm font-medium text-gray-700 mb-2">
                  What does your business do?
                </label>
                <textarea
                  id="businessDescription"
                  name="businessDescription"
                  value={formData.businessDescription}
                  onChange={handleInputChange}
                  rows={4}
                  placeholder="e.g., We help small businesses automate their customer service with AI chatbots, reducing response time by 80% and improving customer satisfaction..."
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg resize-none text-black"
                  required
                />
              </div>
              
              <div>
                <label htmlFor="targetAudience" className="block text-sm font-medium text-gray-700 mb-2">
                  Target Audience (Optional)
                </label>
                <input
                  type="text"
                  id="targetAudience"
                  name="targetAudience"
                  value={formData.targetAudience}
                  onChange={handleInputChange}
                  placeholder="e.g., Small business owners, Marketing managers, SaaS companies"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg text-black"
                />
              </div>

              <div>
                <label htmlFor="userFullName" className="block text-sm font-medium text-gray-700 mb-2">
                  Your full name (for email signature)
                </label>
                <input
                  type="text"
                  id="userFullName"
                  name="userFullName"
                  value={formData.userFullName}
                  onChange={handleInputChange}
                  placeholder="e.g., Alex Johnson"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg text-black"
                />
              </div>

              <div>
                <label htmlFor="userPosition" className="block text-sm font-medium text-gray-700 mb-2">
                  Your position / title (for email signature)
                </label>
                <input
                  type="text"
                  id="userPosition"
                  name="userPosition"
                  value={formData.userPosition}
                  onChange={handleInputChange}
                  placeholder="e.g., Head of Growth"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg text-black"
                />
              </div>

              <div>
                <label htmlFor="emailCount" className="block text-sm font-medium text-gray-700 mb-2">
                  How many cold emails do you want to generate?
                </label>
                <select
                  id="emailCount"
                  name="emailCount"
                  value={formData.emailCount}
                  onChange={handleInputChange}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg text-black"
                >
                  {EMAIL_COUNT_OPTIONS.map((option) => (
                    <option key={option.id} value={option.id}>
                      {option.label}
                    </option>
                  ))}
                </select>
                <p className="text-sm text-gray-500 mt-2">
                  Choose the range of personalized cold emails you'd like to generate with follow-ups.
                </p>
              </div>
              
              {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                  <p className="text-red-800">{error}</p>
                </div>
              )}
              
              <div className="pt-4">
                <button 
                  type="submit"
                  disabled={isGenerating}
                  className="w-full bg-gradient-to-r from-green-600 to-blue-600 text-white px-8 py-4 rounded-xl text-lg font-semibold hover:from-green-700 hover:to-blue-700 transition-all shadow-lg flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isGenerating ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Generating Campaign...
                    </>
                  ) : (
                    <>
                      <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                      Generate Find Targets & Generate Emails
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      </section>

      {/* How it Works Section */}
      <section className="px-6 py-20">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-gray-900 mb-4">How it works</h2>
            <p className="text-xl text-gray-600">Three simple steps to personalized outreach</p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            {/* Step 1 */}
            <div className="bg-white rounded-2xl p-8 shadow-lg border border-gray-100 text-center">
              <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-2xl flex items-center justify-center mx-auto mb-6">
                <span className="text-2xl font-bold text-white">1</span>
              </div>
              <h3 className="text-2xl font-bold text-gray-900 mb-4">Paste or write</h3>
              <p className="text-gray-600 leading-relaxed">
                Drop in your message — anything from a DM to a LinkedIn post. 
                Or paste a LinkedIn profile URL for instant personalization.
              </p>
            </div>

            {/* Step 2 */}
            <div className="bg-white rounded-2xl p-8 shadow-lg border border-gray-100 text-center relative">
              <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
              </div>
              <div className="w-16 h-16 bg-gradient-to-r from-green-500 to-blue-500 rounded-2xl flex items-center justify-center mx-auto mb-6">
                <span className="text-2xl font-bold text-white">2</span>
              </div>
              <h3 className="text-2xl font-bold text-gray-900 mb-4">Choose a tone</h3>
              <p className="text-gray-600 leading-relaxed mb-6">
                Pick how you want to sound: friendly, direct, confident, empathetic, or playful.
              </p>
              <div className="flex flex-wrap gap-2 justify-center">
                <span className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm">Friendly</span>
                <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">Direct</span>
                <span className="px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm">Confident</span>
                <span className="px-3 py-1 bg-pink-100 text-pink-800 rounded-full text-sm">Empathetic</span>
              </div>
            </div>

            {/* Step 3 */}
            <div className="bg-white rounded-2xl p-8 shadow-lg border border-gray-100 text-center">
              <div className="w-16 h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center mx-auto mb-6">
                <span className="text-2xl font-bold text-white">3</span>
              </div>
              <h3 className="text-2xl font-bold text-gray-900 mb-4">Get rewrite + tweak</h3>
              <p className="text-gray-600 leading-relaxed">
                AI rewrites your text instantly. Edit, shorten, or add a dash of emoji flair. 
                Get 2 follow-up emails included.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="px-6 py-20 bg-white">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-gray-900 mb-4">Powerful features</h2>
            <p className="text-xl text-gray-600">Everything you need for successful cold outreach</p>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {/* Feature 1 */}
            <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-100">
              <div className="w-12 h-12 bg-blue-600 rounded-xl flex items-center justify-center mb-4">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-gray-900 mb-3">Lightning Fast</h3>
              <p className="text-gray-600">Generate personalized emails in under 10 seconds with our advanced AI.</p>
            </div>

            {/* Feature 2 */}
            <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-2xl p-6 border border-green-100">
              <div className="w-12 h-12 bg-green-600 rounded-xl flex items-center justify-center mb-4">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-gray-900 mb-3">LinkedIn Integration</h3>
              <p className="text-gray-600">Automatically scrape LinkedIn profiles for instant personalization.</p>
            </div>

            {/* Feature 3 */}
            <div className="bg-gradient-to-br from-purple-50 to-violet-50 rounded-2xl p-6 border border-purple-100">
              <div className="w-12 h-12 bg-purple-600 rounded-xl flex items-center justify-center mb-4">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-gray-900 mb-3">Follow-up Sequences</h3>
              <p className="text-gray-600">Get 2 additional follow-up emails to maximize your response rate.</p>
            </div>

            {/* Feature 4 */}
            <div className="bg-gradient-to-br from-pink-50 to-rose-50 rounded-2xl p-6 border border-pink-100">
              <div className="w-12 h-12 bg-pink-600 rounded-xl flex items-center justify-center mb-4">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m-9 0h10m-10 0a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V6a2 2 0 00-2-2M9 12h6m-6 4h6" />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-gray-900 mb-3">Multiple Tones</h3>
              <p className="text-gray-600">Choose from friendly, direct, confident, empathetic, or playful tones.</p>
            </div>

            {/* Feature 5 */}
            <div className="bg-gradient-to-br from-indigo-50 to-blue-50 rounded-2xl p-6 border border-indigo-100">
              <div className="w-12 h-12 bg-indigo-600 rounded-xl flex items-center justify-center mb-4">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-gray-900 mb-3">Secure & Private</h3>
              <p className="text-gray-600">Your data is encrypted and never shared with third parties.</p>
            </div>

            {/* Feature 6 */}
            <div className="bg-gradient-to-br from-yellow-50 to-orange-50 rounded-2xl p-6 border border-yellow-100">
              <div className="w-12 h-12 bg-yellow-600 rounded-xl flex items-center justify-center mb-4">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-gray-900 mb-3">High Response Rates</h3>
              <p className="text-gray-600">Our AI-generated emails achieve 3x higher response rates than generic templates.</p>
            </div>
          </div>
        </div>
      </section>

      {/* Results Section */}
      {showResults && campaign && (
        <section className="px-6 py-20 bg-gray-50">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold text-gray-900 mb-4">Your Generated Cold Email Campaign</h2>
              <p className="text-lg text-gray-600 mb-6">
                Successfully generated {campaign.templates?.length || 0} email templates and found {campaign.targets?.length || 0} potential targets
              </p>
              
              <div className="flex flex-col sm:flex-row gap-4 justify-center mb-8">
                <button
                  onClick={handleExportCSV}
                  className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center"
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  Export CSV
                </button>
                <button
                  onClick={handleExportPDF}
                  className="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors flex items-center justify-center"
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                  </svg>
                  Export PDF
                </button>
              </div>
            </div>

            <div className="grid gap-8">
              {/* Personalized Emails per Target */}
              <div className="space-y-6">
                <h3 className="text-2xl font-bold text-gray-900">Personalized Emails by Target</h3>

                {campaign.targets?.map((target) => (
                  <div key={target.id} className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <h4 className="font-bold text-gray-900">{target.name}</h4>
                        <p className="text-gray-600">{target.title}</p>
                        <p className="text-gray-500">{target.company}</p>
                        {target.email && (
                          <p className="text-blue-600 text-sm">{target.email}</p>
                        )}
                      </div>
                    </div>

                    <div className="mt-4 space-y-4">
                      {campaign.templates
                        ?.filter((template) => {
                          const tId = (template as any).targetId;
                          // show templates that belong to this target or templates without a targetId (generic)
                          return !tId || tId === target.id;
                        })
                        .map((template) => {
                          const personalized = personalizeTemplateForTarget(template, target);
                          return (
                            <div key={`${target.id}-${template.id}`} className="bg-gray-50 rounded-lg p-4">
                              <div className="mb-2 flex items-center justify-between">
                                <div>
                                  <div className="text-sm text-gray-500">{template.templateType === 'initial' ? 'Initial' : template.templateType === 'followup1' ? 'Follow-up #1' : 'Follow-up #2'}</div>
                                  <div className="font-medium text-gray-800">{personalized.subject}</div>
                                </div>
                                <div>
                                  <button
                                    onClick={() => handleCopyEmail(template, target)}
                                    className="ml-4 bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700 transition-colors"
                                  >
                                    Copy Email
                                  </button>
                                </div>
                              </div>

                              <div className="text-gray-700 whitespace-pre-wrap leading-relaxed">{personalized.body}</div>
                            </div>
                          );
                        })}
                   </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </section>
      )}

      {/* Footer */}
      <footer className="px-6 py-12 border-t border-gray-200">
        <div className="max-w-7xl mx-auto text-center text-gray-500">
          <p>&copy; 2024 BizAI Tools. All rights reserved.</p>
        </div>
      </footer>
    </div>
  );
}
